name: Rust Build

on:
  push:
    tags:
      - 'v*'
    branches:
      - '**'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: arm64e-apple-ios
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: aarch64-linux-android
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Install i686 OpenSSL
        if: matrix.target == 'i686-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y gcc-multilib libssl-dev:i386 pkg-config:i386
          
          # 设置环境变量
          echo "PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/i386-linux-gnu" >> $GITHUB_ENV

      - name: Setup Android target
        if: matrix.target == 'aarch64-linux-android'
        run: |
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang" >> $GITHUB_ENV

      - name: Install Android OpenSSL
        if: matrix.target == 'aarch64-linux-android'
        run: |
          # 下载并解压 OpenSSL 源码
          curl -LO https://www.openssl.org/source/openssl-3.1.4.tar.gz
          tar xf openssl-3.1.4.tar.gz
          cd openssl-3.1.4

          # 设置交叉编译环境变量
          export PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          export ANDROID_API=24
          export CC=aarch64-linux-android$ANDROID_API-clang
          export CXX=aarch64-linux-android$ANDROID_API-clang++
          export CFLAGS="-D__ANDROID_API__=$ANDROID_API"
          
          # 配置并编译 OpenSSL
          ./Configure android-arm64 \
            --prefix=$PWD/../openssl-android-arm64 \
            --openssldir=$PWD/../openssl-android-arm64 \
            no-shared no-tests
          
          make -j$(nproc)
          make install_sw

          # 设置环境变量
          echo "OPENSSL_DIR=$PWD/../openssl-android-arm64" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$PWD/../openssl-android-arm64/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$PWD/../openssl-android-arm64/lib" >> $GITHUB_ENV

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build i686
        shell: bash
        if: matrix.target == 'i686-unknown-linux-gnu'
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR }}
        run: |
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --target ${{ matrix.target }}
          fi

      - name: Build Android
        shell: bash
        if: matrix.target == 'aarch64-linux-android'
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR }}
        run: |
          cargo install cargo-ndk
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            cargo ndk -t arm64-v8a -p 24 build --release
          else
            cargo ndk -t arm64-v8a -p 24 build
          fi

      - name: Build
        if: matrix.target != 'aarch64-linux-android' && matrix.target != 'i686-unknown-linux-gnu'
        shell: bash
        run: |
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --target ${{ matrix.target }}
          fi

      - name: Archive Artifacts
        shell: bash
        run: |
          mkdir -p target/artifacts
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            if [[ "${{ matrix.target }}" == *"windows"* ]]; then
              cp "target/${{ matrix.target }}/release/marsho-cli.exe" "target/artifacts/marsho-cli-${{ matrix.target }}.exe"
            else
              cp "target/${{ matrix.target }}/release/marsho-cli" "target/artifacts/marsho-cli-${{ matrix.target }}"
            fi
          else
            if [[ "${{ matrix.target }}" == *"windows"* ]]; then
              cp "target/${{ matrix.target }}/debug/marsho-cli.exe" "target/artifacts/marsho-cli-${{ matrix.target }}-debug.exe"
            else
              cp "target/${{ matrix.target }}/debug/marsho-cli" "target/artifacts/marsho-cli-${{ matrix.target }}-debug"
            fi
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-${{ startsWith(github.ref, 'refs/tags/') && 'release' || 'debug' }}
          path: target/artifacts/

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            target/artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
